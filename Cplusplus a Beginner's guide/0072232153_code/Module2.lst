listing 1
#include <iostream> 
/* This program shows the difference between  
   signed and unsigned integers. */ 
 
using namespace std; 
 
int main() 
{ 
  short int i; // a signed short integer 
  short unsigned int j; // an unsigned short integer 
 
  j = 60000;  
  i = j; 
  cout << i << " " << j; 
 
  return 0; 
}

listing 2
// This program displays the alphabet. 
 
#include <iostream> 
using namespace std; 
 
int main() 
{ 
  char letter; 
 
  for(letter = 'A'; letter <= 'Z'; letter++) 
    cout << letter; 
 
  return 0; 
}

listing 3
/*    
   Use the Pythagorean theorem to find 
   find the length of the hypotenuse 
   given the lengths of the two opposing 
   sides. 
*/ 
 
#include <iostream> 
#include <cmath> 
using namespace std; 
  
int main() {    
  double x, y, z; 
 
  x = 5; 
  y = 4; 
 
  z = sqrt(x*x + y*y); 
 
  cout << "Hypotenuse is " << z; 
 
  return 0; 
}

listing 4
// Demonstrate bool values. 
 
#include <iostream> 
using namespace std;  
 
int main() { 
  bool b; 
 
  b = false; 
  cout <<  "b is " << b << "\n"; 
 
  b = true; 
  cout <<  "b is " << b << "\n"; 
 
  // a bool value can control the if statement 
  if(b) cout <<  "This is executed.\n"; 
 
  b = false; 
  if(b) cout <<  "This is not executed.\n"; 
 
  // outcome of a relational operator is a true/false value 
  cout <<  "10 > 9 is " << (10 > 9) << "\n"; 
 
  return 0; 
}

listing 5
/* 
   Project 2-1 
 
   Talking to Mars 
*/ 
 
#include <iostream> 
using namespace std; 
 
int main() {    
  double distance; 
  double lightspeed; 
  double delay; 
  double delay_in_min; 
 
  distance = 34000000.0; // 34,000,000 miles 
  lightspeed = 186000.0; // 186,000 per second 
 
  delay = distance / lightspeed;     
 
  cout <<  "Time delay when talking to Mars: " << 
           delay << " seconds.\n"; 
     
  delay_in_min = delay / 60.0; 
 
  cout <<  "This is " << delay_in_min << " minutes."; 
 
  return 0; 
}

listing 6
// Demonstrate some escape sequences. 
 
#include <iostream> 
using namespace std; 
 
int main() 
{ 
  cout << "one\ttwo\tthree\n"; 
  cout << "123\b\b45"; 
 
  return 0; 
}

listing 7
// Demonstrate dynamic initialization. 
 
#include <iostream> 
using namespace std; 
  
int main() { 
  double radius = 4.0, height = 5.0; 
 
  // dynamically initializ volume 
  double volume = 3.1416 * radius * radius * height; 
 
  cout << "Volume is " << volume; 
 
  return 0; 
}

listing 8
// Demonstrate the modulus operator. 
 
#include <iostream> 
using namespace std; 
 
int main() 
{ 
  int x, y; 
 
  x = 10; 
  y = 3; 
  cout << x << " / " << y << " is " << x / y <<  
       " with a remainder of " << x % y << "\n";  
 
  x = 1; 
  y = 2; 
  cout << x << " / " << y << " is " << x / y << "\n" << 
          x << " % " << y << " is " << x % y;  
 
  return 0; 
}

listing 9
// Demonstrate the relational and logical operators. 
 
#include <iostream> 
using namespace std; 
 
int main() {    
  int i, j; 
  bool b1, b2; 
 
  i = 10; 
  j = 11; 
  if(i < j) cout << "i < j\n"; 
  if(i <= j) cout << "i <= j\n"; 
  if(i != j) cout << "i != j\n"; 
  if(i == j) cout << "this won't execute\n"; 
  if(i >= j) cout << "this won't execute\n"; 
  if(i > j) cout << "this won't execute\n"; 
 
  b1 = true; 
  b2 = false; 
  if(b1 && b2) cout << "this won't execute\n"; 
  if(!(b1 && b2)) cout << "!(b1 && b2) is true\n"; 
  if(b1 || b2) cout << "b1 || b2 is true\n"; 
 
  return 0; 
}

listing 10
/* 
 
  Project 2-2 
 
  Create an XOR using the C++ logical operators. 
 
*/ 
 
#include <iostream> 
#include <cmath> 
 
using namespace std; 
 
int main() 
{ 
  bool p, q; 
 
  p = true; 
  q = true; 
 
  cout << p << " XOR " << q << " is " << 
    ( (p || q) && !(p && q) ) << "\n"; 
   
 
  p = false; 
  q = true; 
 
  cout << p << " XOR " << q << " is " << 
    ( (p || q) && !(p && q) ) << "\n"; 
   
 
  p = true; 
  q = false; 
 
  cout << p << " XOR " << q << " is " << 
    ( (p || q) && !(p && q) ) << "\n"; 
   
 
  p = false; 
  q = false; 
 
  cout << p << " XOR " << q << " is " << 
    ( (p || q) && !(p && q) ) << "\n"; 
   
 
  return 0; 
}

listing 11
int x; 
char ch; 
float  f; 
 
ch = x;    /* line 1 */ 
x = f;     /* line 2 */ 
f = ch;    /* line 3 */ 
f = x;     /* line 4 */

listing 12
(float) x / 2

listing 13
// Demonstrate a cast. 
 
#include <iostream> 
using namespace std; 
 
int main(){ 
  int i; 
 
  for(i=1; i <= 10; ++i ) 
    cout << i << "/ 2 is: " << (float) i / 2 << '\n'; 
 
  return 0; 
}

listing 14
/* 
   Project 2-3 
 
   Compute the regular payments for a loan. 
 
   Call this file RegPay.cpp 
*/ 
 
#include <iostream> 
#include <cmath> 
using namespace std; 
 
int main() {    
  double Principal;    // original principal 
  double IntRate;      // interest rate as a double, such as 0.075 
  double PayPerYear;   // number of payments per year 
  double NumYears;     // number of years 
  double Payment;      // the regular payment 
  double numer, denom; // temporary work variables 
  double b, e;         // base and exponent for call to Pow() 
 
  cout << "Enter principal: "; 
  cin >> Principal; 
 
  cout << "Enter interest rate (i.e., 0.075): "; 
  cin >> IntRate; 
 
  cout << "Enter number of payements per year: "; 
  cin >> PayPerYear; 
 
  cout << "Enter number of years: "; 
  cin >> NumYears; 
 
  numer = IntRate * Principal / PayPerYear; 
  
  e = -(PayPerYear * NumYears); 
  b =  (IntRate / PayPerYear) + 1; 
 
  denom = 1 - pow(b, e); 
     
  Payment = numer / denom; 
 
  cout <<  "Payment is " << Payment; 
 
  return 0; 
}

