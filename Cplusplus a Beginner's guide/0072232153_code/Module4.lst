listing 1
#include <iostream> 
using namespace std; 
 
int main() 
{ 
  int sample[10]; // this reserves 10 integer elements 
  int t; 
 
  // load the array 
  for(t=0; t<10; ++t) sample[t] = t; 
 
  // display the array 
  for(t=0; t<10; ++t) 
    cout << "This is sample[" << t << "]: " << sample[t] << "\n"; 
 
  return 0; 
}

listing 2
/* 
   Compute the average and find the minimum 
   and maximum of a set of values. 
*/ 
 
#include <iostream>   
using namespace std;   
   
int main()   
{   
  int i, avg, min_val, max_val; 
  int nums[10];   
   
  nums[0] = 10;   
  nums[1] = 18;   
  nums[2] = 75;   
  nums[3] = 0;   
  nums[4] = 1;   
  nums[5] = 56;   
  nums[6] = 100;   
  nums[7] = 12;   
  nums[8] = -19;   
  nums[9] = 88;   
   
  // compute the average 
  avg = 0; 
  for(i=0; i<10; i++) 
    avg += nums[i]; 
 
  avg /= 10; 
  
  cout << "Average is " << avg << '\n';   
 
  // find minimum and maximum values      
  min_val = max_val = nums[0];   
  for(i=1; i<10; i++) {   
    if(nums[i] < min_val) min_val = nums[i];  
    if(nums[i] > max_val) max_val = nums[i];  
  }  
  
  cout << "Minimum value: " << min_val << '\n';   
  cout << "Maximum value: " <<  max_val << '\n';   
   
  return 0;   
}

listing 3
#include <iostream> 
using namespace std; 
 
int main() 
{ 
  int t,i, nums[3][4]; 
 
  for(t=0; t < 3; ++t) { 
    for(i=0; i < 4; ++i) { 
      nums[t][i] = (t*4)+i+1; 
      cout << nums[t][i] << ' '; 
    } 
    cout << '\n'; 
  } 
 
  return 0; 
}

listing 4
/* 
   Project 4-1 
   Demonstrat the Bubble sort. 
*/ 
#include <iostream> 
#include <cstdlib> 
using namespace std; 
 
int main() 
{ 
  int nums[10]; 
  int a, b, t; 
  int size; 
 
  size = 10; // number of elements to sort 
 
  // give the array some random initial values 
  for(t=0; t<size; t++) nums[t] = rand(); 
 
  // display original array 
  cout << "Original array is:\n   "; 
  for(t=0; t<size; t++) cout << nums[t] << ' '; 
  cout << '\n'; 
 
  // This is the bubble sort. 
  for(a=1; a<size; a++) 
    for(b=size-1; b>=a; b--) { 
      if(nums[b-1] > nums[b]) { // if out of order 
        // exchange elements  
        t = nums[b-1]; 
        nums[b-1] = nums[b]; 
        nums[b] = t; 
      } 
    } 
 
  // display sorted array 
  cout << "\nSorted array is:\n   "; 
  for(t=0; t<size; t++) cout << nums[t] << ' '; 
 
  return 0; 
}

listing 5
// Using cin to read a string from the keyboard. 
 
#include <iostream> 
using namespace std; 
 
int main() 
{ 
  char str[80]; 
 
  cout << "Enter a string: "; 
  cin >> str; // read string from keyboard 
  cout << "Here is your string: "; 
  cout << str; 
 
  return 0; 
}

listing 6
// Using gets() to read a string from the keyboard. 
 
#include <iostream> 
#include <cstdio> 
using namespace std; 
 
int main() 
{ 
  char str[80]; 
 
  cout << "Enter a string: "; 
  gets(str); // read a string using gets() 
  cout << "Here is your string: "; 
  cout << str; 
 
  return 0; 
}

listing 7
// Demonstrate the string functions. 
#include <iostream> 
#include <cstdio> 
#include <cstring> 
using namespace std; 
 
int main() 
{ 
  char s1[80], s2[80]; 
 
  strcpy(s1, "C++"); 
  strcpy(s2, " is power programming."); 
 
  cout << "lengths: " << strlen(s1); 
  cout << ' ' << strlen(s2) << '\n'; 
 
  if(!strcmp(s1, s2))  
     cout << "The strings are equal\n"; 
  else cout << "not equal\n"; 
   
  strcat(s1, s2); 
  cout << s1 << '\n'; 
 
  strcpy(s2, s1); 
  cout << s1 << " and " << s2 << "\n"; 
 
  if(!strcmp(s1, s2)) 
    cout << "s1 and s2 are now the same.\n"; 
 
  return 0; 
}

listing 8
// Convert a string to uppercase.  
#include <iostream> 
#include <cstring> 
#include <cctype>  
using namespace std; 
 
int main() 
{ 
  char str[80]; 
  int i; 
 
  strcpy(str, "this is a test"); 
 
  for(i=0; str[i]; i++) str[i] = toupper(str[i]); 
 
  cout << str; 
 
  return 0; 
}

listing 9
int sqrs[10][2] = { 
  1, 1, 
  2, 4, 
  3, 9, 
  4, 16, 
  5, 25, 
  6, 36, 
  7, 49, 
  8, 64, 
  9, 81, 
  10, 100 
};

listing 10
int sqrs[10][2] = { 
  {1, 1}, 
  {2, 4}, 
  {3, 9}, 
  {4, 16}, 
  {5, 25}, 
  {6, 36}, 
  {7, 49}, 
  {8, 64}, 
  {9, 81}, 
  {10, 100} 
};

listing 11
#include <iostream> 
using namespace std; 
 
 int main() 
{ 
  int i, j; 
  int sqrs[10][2] = { 
    {1, 1}, 
    {2, 4}, 
    {3, 9}, 
    {4, 16}, 
    {5, 25}, 
    {6, 36}, 
    {7, 49}, 
    {8, 64}, 
    {9, 81}, 
    {10, 100} 
  }; 
 
  cout << "Enter a number between 1 and 10: "; 
  cin >> i; 
 
  // look up i 
  for(j=0; j<10; j++)  
    if(sqrs[j][0]==i) break; 
  cout << "The square of " << i << " is "; 
  cout << sqrs[j][1]; 
 
  return 0; 
}

listing 12
int sqrs[][2] = { 
  1, 1, 
  2, 4, 
  3, 9, 
  4, 16, 
  5, 25, 
  6, 36, 
  7, 49, 
  8, 64, 
  9, 81, 
  10, 100 
};

listing 13
// A simple computerized telephone directory. 
#include <iostream> 
#include <cstdio> 
using namespace std; 
 
int main() 
{ 
  int i; 
  char str[80]; 
  char numbers[10][80] = { 
    "Tom", "555-3322", 
    "Mary", "555-8976", 
    "Jon", "555-1037", 
    "Rachel", "555-1400", 
    "Sherry", "555-8873" 
  }; 
 
  cout << "Enter name: "; 
  cin >> str; 
 
  for(i=0; i < 10; i += 2)  
    if(!strcmp(str, numbers[i])) { 
      cout << "Number is " << numbers[i+1] << "\n"; 
      break; 
    } 
   
  if(i == 10) cout << "Not found.\n"; 
   
 
  return 0; 
}

listing 14
#include <iostream> 
using namespace std; 
 
int main() 
{ 
  int total; 
  int *ptr; 
  int val; 
 
  total = 3200; // assign 3,200 to total 
 
  ptr = &total; // get address of total 
 
  val = *ptr;   // get value at that addres  
 
  cout << "Total is: " << val << '\n'; 
 
  return 0; 
}

listing 15
// This program will not work right. 
#include <iostream> 
using namespace std; 
 
int main() 
{ 
  double x, y; 
  int *p;  
 
  x = 123.23; 
  p = (int *) &x; // use cast to assign double * to int * 
 
  y = *p;    // What will this do? 
  cout << y; // What will this print? 
 
  return 0; 
}

listing 16
#include <iostream> 
using namespace std; 
 
int main() 
{ 
  int *p, num; 
 
  p = &num; 
 
  *p = 100; 
  cout << num << ' '; 
  (*p)++; 
  cout << num << ' '; 
  (*p)--; 
  cout << num << '\n'; 
 
  return 0; 
}

listing 17
#include <iostream> 
using namespace std; 
 
int main() 
{ 
  int *i, j[10]; 
  double *f, g[10]; 
  int x; 
 
  i = j;  
  f = g;  
 
  for(x=0; x<10; x++)  
    cout << i+x << ' ' << f+x << '\n';     
 
  return 0; 
}

listing 18
// Reverse case using array indexing. 
#include <iostream> 
#include <cctype> 
using namespace std; 
 
int main() 
{ 
  int i; 
  char str[80] = "This Is A Test"; 
 
  cout << "Original string: " << str << "\n"; 
 
  for(i = 0; str[i]; i++) { 
    if(isupper(str[i])) 
      str[i] = tolower(str[i]); 
    else if(islower(str[i])) 
      str[i] = toupper(str[i]); 
  } 
 
  cout << "Inverted-case string: " << str; 
 
  return 0; 
}

listing 19
// Reverse case using pointer arithmetic. 
#include <iostream> 
#include <cctype> 
using namespace std; 
 
int main() 
{ 
  char *p; 
  char str[80] = "This Is A Test"; 
 
  cout << "Original string: " << str << "\n"; 
 
  p = str; // assign p the address of the start of the array 
 
 
  while(*p) { 
    if(isupper(*p)) 
      *p = tolower(*p); 
    else if(islower(*p)) 
      *p = toupper(*p); 
    p++; 
  } 
 
  cout << "Inverted-case string: " << str; 
 
  return 0; 
}

listing 20
// Index a pointer as if it were an array. 
#include <iostream> 
#include <cctype> 
using namespace std; 
 
int main() 
{ 
  char *p; 
  int i; 
  char str[80] = "This Is A Test"; 
 
  cout << "Original string: " << str << "\n"; 
 
  p = str; // assign p the address of the start of the array 
 
  // now, index p 
  for(i = 0; p[i]; i++) { 
    if(isupper(p[i])) 
      p[i] = tolower(p[i]); 
    else if(islower(p[i])) 
      p[i] = toupper(p[i]); 
  } 
 
  cout << "Inverted-case string: " << str; 
 
  return 0; 
}

listing 21
#include <iostream> 
using namespace std; 
 
int main() 
{ 
  char *ptr; 
 
  ptr = "Pointers add power to C++.\n"; 
 
  cout << ptr; 
 
  return 0; 
}

listing 22
/*  
   Project 4-2 
   Reverse a string in place. 
*/ 
#include <iostream> 
#include <cstring> 
using namespace std; 
 
int main() 
{ 
  char str[] = "this is a test"; 
  char *start, *end; 
  int len; 
  char t; 
 
  cout << "Original: " << str << "\n"; 
   
  len = strlen(str); 
 
  start = str; 
  end = &str[len-1]; 
 
  while(start < end) { 
    // swap chars 
    t = *start; 
    *start = *end; 
    *end = t; 
 
    // advance pointers 
    start++; 
    end--; 
  } 
 
 
  cout << "Reversed: " << str << "\n"; 
  return 0; 
}

listing 23
// Use a 2-D array of pointers to create a dictionary. 
 
#include <iostream> 
#include <cstring> 
using namespace std; 
  
int main() { 
 
  char *dictionary[][2] = { 
    "pencil", "A writing instrument.", 
    "keyboard", "An input device.", 
    "rifle", "A sholder-fired firearm.", 
    "airplane", "A fixed-wing aircraft.", 
    "network", "An interconnected group of computers.", 
    "", "" 
  }; 
  char word[80]; 
  int i; 
 
  cout << "Enter word: "; 
  cin >> word; 
 
  for(i = 0; *dictionary[i][0]; i++) { 
    if(!strcmp(dictionary[i][0], word)) { 
      cout << dictionary[i][1] << "\n"; 
      break; 
    } 
  } 
 
  if(!*dictionary[i][0]) 
    cout << word << " not found.\n"; 
 
  return 0; 
}

listing 24
#include <iostream> 
using namespace std; 
 
int main() 
{ 
  int x, *p, **q; 
 
  x = 10; 
 
  p = &x; 
 
  q = &p; 
 
  cout << **q; // prints the value of x 
 
  return 0; 
}

